swagger: "2.0"
info:
  description: "This API manages routes for public transport agencies. Saving your data in a relational database, converts the information to the GTFS specification, which can be used to search for information from traffic agencies and to monitor in real time any specific itinerary. \n\nImplemented for a graduate work in the Computer Science course. \n\n It is necessary to have configured the SMTP server credentials to notify the user via e-mail with the generated password."
  version: "1.0.0"
  title: "GTFS Manager"
  contact:
    email: "matheusinhesta@live.com"
basePath: "/api"
tags:
  - name: "Auth"
    description: "Everything about authentication on API"

  - name: "Agency"
    description: "Everything about agency informations"

  - name: "Calendar Dates"
    description: "Operations about agency calendar dates. Only admin user can access this routes!"

  - name: "Driver"
    description: "Driver-related operations. Only drivers can access this route!"

  - name: "Fares"
    description: "Operations about agency fares and fare rules. Only admin user can access this routes!"

  - name: "GTFS Files"
    description: "Download the feed in text files from the specified agency. Public route!"

  - name: "Realtime Trips"
    description: "Operations on real-time monitoring of a specific trip. No authentication is required!"

  - name: "Routes"
    description: "Operations about agency routes. Only admin user can access this routes!"

  - name: "Services"
    description: "Operations about agency services. Only admin user can access this routes!"

  - name: "Stops"
    description: "Operations about agency stops. Only admin user can access this routes!"

  - name: "Stop Times"
    description: "Operations about agency stop times. Only admin user can access this routes!"

  - name: "Trips"
    description: "Operations about agency trips. Only admin user can access this routes!"

  - name: "Trips In Progress"
    description: "Operations about agency trips in progress. Only admin user can access this routes!"

  - name: "Users"
    description: "Operations about user. Only admin user can access this routes!"

  - name: "Vehicles"
    description: "Operations about agency vehicles. Only admin user can access this routes!"

  - name: "Zones"
    description: "Operations about agency zones. Only admin user can access this routes!"


paths:
  #Auth Routes
  /register:
    post:
      tags:
        - "Auth"
      summary: "Register your Agency and User in API"
      description: "It is necessary to have configured the SMTP server credentials to notify the user via e-mail with the generated password"
      operationId: "register"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "email"
          in: "formData"
          description: "User e-mail address"
          required: true
          type: "string"

        - name: "name"
          in: "formData"
          description: "Full username"
          required: true
          type: "string"

        - name: "agency_name"
          in: "formData"
          description: "Full name of the transit agency"
          required: true
          type: "string"

        - name: "agency_url"
          in: "formData"
          description: "URL of the transit agency"
          required: true
          type: "string"

        - name: "agency_timezone"
          in: "formData"
          description: "Timezone where the transit agency is located"
          required: true
          type: "string"

        - name: "agency_lang"
          in: "formData"
          description: "Primary language used by this transit agency"
          required: false
          type: "string"

        - name: "agency_phone"
          in: "formData"
          description: "A voice telephone number for the specified agency. This field is a string value that presents the telephone number as typical for the agency's service area. It can and should contain punctuation marks to group the digits of the number. Dialable text (for example, TriMet's '503-238-RIDE') is permitted, but the field must not contain any other descriptive text"
          required: false
          type: "string"

        - name: "agency_fare_url"
          in: "formData"
          description: "URL of a web page that allows a rider to purchase tickets or other fare instruments for that agency online"
          required: false
          type: "string"

        - name: "agency_email"
          in: "formData"
          description: "Email address actively monitored by the agencyâ€™s customer service department. This email address should be a direct contact point where transit riders can reach a customer service representative at the agency"
          required: false
          type: "string"

      responses:
        "201":
          description: "Success! An e-mail was sent to the registered address with the user generated password."
        "400":
          description: "Invalid input."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  /login:
    post:
      tags:
        - "Auth"
      summary: "Login user into the API"
      description: ""
      operationId: "login"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "email"
          in: "formData"
          description: "The user e-mail address for login"
          required: true
          type: "string"
        - name: "password"
          in: "formData"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        "200":
          description: "Successful operation"
          headers:
            access_token:
              type: "string"
              description: "JWT token used for any request that needs to be authenticated"
            token_type:
              type: "string"
              description: "Tokens type"
            expires_in:
              type: "string"
              format: "date-time"
              description: "Time in UTC when token expires"
        "400":
          description: "Invalid inputs."
        "401":
          description: "Unauthorized. Invalid e-mail/password"
        "500":
          description: "The token could not be created"

  /logout:
    get:
      tags:
        - "Auth"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logout"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"
      responses:
        "200":
          description: "Successful operation"

  /forget-password:
    post:
      tags:
        - "Auth"
      summary: "Send a new password to the user's e-mail"
      description: "It is necessary to have configured the SMTP server credentials to notify the user via e-mail with the generated a new password"
      operationId: "forgetPassword"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "email"
          in: "formData"
          description: "The user e-mail address for login"
          required: true
          type: "string"

      responses:
        "200":
          description: "Success! An e-mail was sent to the registered address with the user generated a new password."
        "400":
          description: "Invalid input."
        "404":
          description: "User not found."
        "500":
          description: "The token could not be created"

  /change-password:
    post:
      tags:
        - "Auth"
      summary: "Change the password of the authenticated user"
      description: ""
      operationId: "changePassword"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "password"
          in: "formData"
          description: "The user password"
          required: true
          type: "string"

        - name: "new_password"
          in: "formData"
          description: "The new password"
          required: true
          type: "string"

        - name: "new_password_confirmation"
          in: "formData"
          description: "The new password confirmation"
          required: true
          type: "string"

      responses:
        "200":
          description: "Success! User password has been changed."
        "400":
          description: "Invalid input."
        "500":
          description: "The new password could not be updated."

  /refresh:
    get:
      tags:
        - "Auth"
      summary: "Refresh access token"
      description: ""
      operationId: "refresh"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"
      responses:
        "200":
          description: "Successful operation"
          headers:
            access_token:
              type: "string"
              description: "JWT token used for any request that needs to be authenticated"
            token_type:
              type: "string"
              description: "Tokens type"
            expires_in:
              type: "string"
              format: "date-time"
              description: "Time in UTC when token expires"

  /me:
    get:
      tags:
        - "Auth"
      summary: "Get authenticated user"
      description: ""
      operationId: "me"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"

  #Agency Routes
  /agency:
    get:
      tags:
        - "Agency"
      summary: "Get user agency"
      description: ""
      operationId: "agency"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Agency"

    post:
      tags:
        - "Agency"
      summary: "Update agency informations"
      description: "Only admin user can access this route!"
      operationId: "agencyUpdate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "name"
          in: "formData"
          type: "string"
          description: "Full name of the transit agency"

        - name: "url"
          in: "formData"
          type: "string"
          description: "URL of the transit agency"

        - name: "timezone"
          in: "formData"
          type: "string"
          description: "Timezone where the transit agency is located"

        - name: "lang"
          in: "formData"
          type: "string"
          description: "Primary language used by this transit agency"

        - name: "phone"
          in: "formData"
          type: "string"
          description: "A voice telephone number for the specified agency. This field is a string value that presents the telephone number as typical for the agency's service area. It can and should contain punctuation marks to group the digits of the number. Dialable text (for example, TriMet's '503-238-RIDE') is permitted, but the field must not contain any other descriptive text"

        - name: "fare_url"
          in: "formData"
          type: "string"
          description: "URL of a web page that allows a rider to purchase tickets or other fare instruments for that agency online"

        - name: "email"
          in: "formData"
          type: "string"
          description: "Email address actively monitored by the agencyâ€™s customer service department. This email address should be a direct contact point where transit riders can reach a customer service representative at the agency"

      responses:
        "200":
          description: "Successful operation."
        "400":
          description: "Invalid input."
        "500":
          description: "The agency could not be updated."

  #Users Routes
  /users:
    get:
      tags:
        - "Users"
      summary: "Get agency users"
      description: ""
      operationId: "users"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"

    post:
      tags:
        - "Users"
      summary: "Creates a new user for the agency"
      description: "If the password field is not passed, a random password is generated and sent to the user's registration email."
      operationId: "userCreate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "name"
          in: "formData"
          type: "string"
          description: "Full username"
          required: true

        - name: "email"
          in: "formData"
          type: "string"
          description: "User e-mail address"
          required: true

        - name: "type_id"
          in: "formData"
          type: "integer"
          description: "User type (1-Adminstrator / 2-Driver)"
          required: true

        - name: "password"
          in: "formData"
          type: "string"
          description: "User password"

        - name: "password_confirmation"
          in: "formData"
          type: "string"
          description: "User password confirmation"

      responses:
        "201":
          description: "Success! An e-mail was sent to the registered address with the user generated password."
        "400":
          description: "Invalid input."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  /users/{user_id}:
    get:
      tags:
        - "Users"
      summary: "Get a specific agency user"
      description: ""
      operationId: "userInformation"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "user_id"
          in: "path"
          description: "ID of specific user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"

    put:
      tags:
        - "Users"
      summary: "Updates a specific agency user"
      description: "If the password field is sent, a notification with the new password will be sent to the user's email"
      operationId: "userUpdate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "user_id"
          in: "path"
          description: "ID of specific user"
          required: true
          type: "integer"
          format: "int64"

        - name: "name"
          in: "formData"
          type: "string"
          description: "Full username"

        - name: "email"
          in: "formData"
          type: "string"
          description: "User e-mail address"

        - name: "type_id"
          in: "formData"
          type: "integer"
          description: "User type (1-Adminstrator / 2-Driver)"

        - name: "password"
          in: "formData"
          type: "string"
          description: "User password"

        - name: "password_confirmation"
          in: "formData"
          type: "string"
          description: "User password confirmation"

      responses:
        "200":
          description: "Successful operation."
        "400":
          description: "Invalid input."
        "404":
          description: "User not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

    delete:
      tags:
        - "Users"
      summary: "Deletes a specific agency user"
      description: ""
      operationId: "deleteUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "user_id"
          in: "path"
          description: "ID of specific user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation."
        "403":
          description: "You cannot delete yourself."
        "404":
          description: "User not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  #Agency Routes
  /routes:
    get:
      tags:
        - "Routes"
      summary: "Get agency routes"
      description: ""
      operationId: "routes"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Route"

    post:
      tags:
        - "Routes"
      summary: "Creates a new route for the agency"
      description: ""
      operationId: "routeCreate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "short_name"
          in: "formData"
          type: "string"
          description: "Short name of a route. This will often be a short, abstract identifier like '32', '100X', or 'Green' that riders use to identify a route, but which doesn't give any indication of what places the route serves."
          required: true

        - name: "long_name"
          in: "formData"
          type: "string"
          description: "Full name of a route. This name is generally more descriptive than the route_short_name and often includes the route's destination or stop."
          required: true

        - name: "type"
          in: "formData"
          type: "string"
          description: "Indicates the type of transportation used on a route."
          enum: ['vlt','subway','train','bus','ferry','tram','cable_car','cable_railway']
          required: true

        - name: "desc"
          in: "formData"
          type: "string"
          description: "Description of a route that provides useful, quality information. Do not simply duplicate the name of the route."

        - name: "url"
          in: "formData"
          type: "string"
          description: "URL of a web page about the particular route. Should be different from the agency.url value."

        - name: "color"
          in: "formData"
          type: "string"
          description: "Route color designation that matches public facing material. Defaults to white (FFFFFF) when omitted or left empty. The color difference between 'color' and 'text_color' should provide sufficient contrast when viewed on a black and white screen."

        - name: "text_color"
          in: "formData"
          type: "string"
          description: "Legible color to use for text drawn against a background of route_color. Defaults to black (000000) when omitted or left empty. The color difference between 'color' and 'text_color' should provide sufficient contrast when viewed on a black and white screen."

        - name: "sort_order"
          in: "formData"
          type: "integer"
          description: "Orders the routes in a way which is ideal for presentation to customers. Routes with smaller route_sort_order values should be displayed first."

      responses:
        "201":
          description: "Success! The route has been registered."
        "400":
          description: "Invalid input."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  /routes/{route_id}:
    get:
      tags:
        - "Routes"
      summary: "Get a specific agency route"
      description: ""
      operationId: "routeInformation"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "route_id"
          in: "path"
          description: "ID of specific user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Route"
        "404":
          description: "Agency route not found."

    put:
      tags:
        - "Routes"
      summary: "Updates a specific agency route"
      description: ""
      operationId: "routeUpdate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "route_id"
          in: "path"
          description: "ID of specific route"
          required: true
          type: "integer"
          format: "int64"

        - name: "short_name"
          in: "formData"
          type: "string"
          description: "Short name of a route. This will often be a short, abstract identifier like '32', '100X', or 'Green' that riders use to identify a route, but which doesn't give any indication of what places the route serves."

        - name: "long_name"
          in: "formData"
          type: "string"
          description: "Full name of a route. This name is generally more descriptive than the route_short_name and often includes the route's destination or stop."

        - name: "type"
          in: "formData"
          type: "string"
          description: "Indicates the type of transportation used on a route."
          enum: ['vlt','subway','train','bus','ferry','tram','cable_car','cable_railway']

        - name: "desc"
          in: "formData"
          type: "string"
          description: "Description of a route that provides useful, quality information. Do not simply duplicate the name of the route."

        - name: "url"
          in: "formData"
          type: "string"
          description: "URL of a web page about the particular route. Should be different from the agency.url value."

        - name: "color"
          in: "formData"
          type: "string"
          description: "Route color designation that matches public facing material. Defaults to white (FFFFFF) when omitted or left empty. The color difference between 'color' and 'text_color' should provide sufficient contrast when viewed on a black and white screen."

        - name: "text_color"
          in: "formData"
          type: "string"
          description: "Legible color to use for text drawn against a background of route_color. Defaults to black (000000) when omitted or left empty. The color difference between 'color' and 'text_color' should provide sufficient contrast when viewed on a black and white screen."

        - name: "sort_order"
          in: "formData"
          type: "integer"
          description: "Orders the routes in a way which is ideal for presentation to customers. Routes with smaller route_sort_order values should be displayed first."

      responses:
        "200":
          description: "Successful operation."
        "400":
          description: "Invalid input."
        "404":
          description: "Agency route not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

    delete:
      tags:
        - "Routes"
      summary: "Deletes a specific agency route"
      description: ""
      operationId: "deleteRoute"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "route_id"
          in: "path"
          description: "ID of specific route"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation."
        "404":
          description: "Agency route not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  #Agency Fares
  /fares:
    get:
      tags:
        - "Fares"
      summary: "Get agency fares"
      description: ""
      operationId: "fares"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FareAttribute"

    post:
      tags:
        - "Fares"
      summary: "Creates a new fare for the agency"
      description: ""
      operationId: "fareCreate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "price"
          in: "formData"
          type: "number"
          description: "Fare price, in the unit specified by currency_type."
          required: true

        - name: "currency_type"
          in: "formData"
          type: "string"
          description: "Currency used to pay the fare."
          required: true

        - name: "payment_method"
          in: "formData"
          type: "boolean"
          description: "Indicates when the fare must be paid. If true, fare is paid on board. Else fare must be paid before boarding."
          required: true

        - name: "transfers"
          in: "formData"
          type: "string"
          description: "Indicates the number of transfers permitted on this fare."
          enum: ['unallowed', 'one', 'two']

        - name: "transfer_duration"
          in: "formData"
          type: "integer"
          description: "Length of time in seconds before a transfer expires. When transfers=0 this field can be used to indicate how long a ticket is valid for or it can can be left empty."

      responses:
        "201":
          description: "Success! The fare has been registered."
        "400":
          description: "Invalid input."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  /fares/{fare_id}:
    get:
      tags:
        - "Fares"
      summary: "Get a specific agency fare"
      description: ""
      operationId: "fareInformation"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "fare_id"
          in: "path"
          description: "ID of specific fare"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FareAttribute"
        "404":
          description: "Agency fare not found."

    put:
      tags:
        - "Fares"
      summary: "Updates a specific agency fare"
      description: ""
      operationId: "fareUpdate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "fare_id"
          in: "path"
          description: "ID of specific fare"
          required: true
          type: "integer"
          format: "int64"

        - name: "price"
          in: "formData"
          type: "number"
          description: "Fare price, in the unit specified by currency_type."

        - name: "currency_type"
          in: "formData"
          type: "string"
          description: "Currency used to pay the fare."

        - name: "payment_method"
          in: "formData"
          type: "boolean"
          description: "Indicates when the fare must be paid. If true, fare is paid on board. Else fare must be paid before boarding."

        - name: "transfers"
          in: "formData"
          type: "string"
          description: "Indicates the number of transfers permitted on this fare."
          enum: ['unallowed', 'one', 'two']

        - name: "transfer_duration"
          in: "formData"
          type: "integer"
          description: "Length of time in seconds before a transfer expires. When transfers=0 this field can be used to indicate how long a ticket is valid for or it can can be left empty."

      responses:
        "200":
          description: "Successful operation."
        "400":
          description: "Invalid input."
        "404":
          description: "Agency fare not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

    delete:
      tags:
        - "Fares"
      summary: "Deletes a specific agency fare"
      description: ""
      operationId: "fareDelete"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "fare_id"
          in: "path"
          description: "ID of specific fare"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation."
        "404":
          description: "Agency fare not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  #Agency Fare Rules
  /fares/{fare_id}/rules:
    get:
      tags:
        - "Fares"
      summary: "Get fare rules"
      description: ""
      operationId: "faresRules"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "fare_id"
          in: "path"
          description: "ID of specific fare"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FareRule"
        "404":
          description: "Agency fare rules not found."

    post:
      tags:
        - "Fares"
      summary: "Creates a new rule for the fare"
      description: ""
      operationId: "fareRuleCreate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "fare_id"
          in: "path"
          description: "ID of specific fare"
          required: true
          type: "integer"
          format: "int64"

        - name: "route_id"
          in: "formData"
          type: "integer"
          description: "Identifies a route (referencing routes.route_id) associated with the fare class. If several routes with the same fare attributes exist, create a record in fare_rules for each route."
          required: true

        - name: "origin_id"
          in: "formData"
          type: "integer"
          description: "Identifies an origin zone (referencing zones.zone_id). If a fare class has multiple origin zones, create a record in fare_rules for each origin_id."

        - name: "destination_id"
          in: "formData"
          type: "integer"
          description: "Identifies a destination zone (referencing zones.zone_id). If a fare class has multiple destination zones, create a record in fare_rules for each destination_id."

        - name: "contains_id"
          in: "formData"
          type: "integer"
          description: "Identifies the zones (referencing zones.zone_id) that a rider will enter while using a given fare class. Used in some systems to calculate correct fare class."

      responses:
        "201":
          description: "Success! The fare rule has been registered."
        "400":
          description: "Invalid input."
        "404":
          description: "Agency fare not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  /fares/{fare_id}/rules/{rule_id}:
    get:
      tags:
        - "Fares"
      summary: "Get a specific agency fare rule"
      description: ""
      operationId: "fareRuleInformation"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "fare_id"
          in: "path"
          description: "ID of specific fare"
          required: true
          type: "integer"
          format: "int64"

        - name: "rule_id"
          in: "path"
          description: "ID of specific fare rule"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FareRule"
        "404":
          description: "Agency fare rule not found."

    put:
      tags:
        - "Fares"
      summary: "Updates a specific agency fare rule"
      description: ""
      operationId: "fareRuleUpdate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "fare_id"
          in: "path"
          description: "ID of specific fare"
          required: true
          type: "integer"
          format: "int64"

        - name: "rule_id"
          in: "path"
          description: "ID of specific fare rule"
          required: true
          type: "integer"
          format: "int64"

        - name: "route_id"
          in: "formData"
          type: "integer"
          description: "Identifies a route (referencing routes.route_id) associated with the fare class. If several routes with the same fare attributes exist, create a record in fare_rules for each route."

        - name: "origin_id"
          in: "formData"
          type: "integer"
          description: "Identifies an origin zone (referencing zones.zone_id). If a fare class has multiple origin zones, create a record in fare_rules for each origin_id."

        - name: "destination_id"
          in: "formData"
          type: "integer"
          description: "Identifies a destination zone (referencing zones.zone_id). If a fare class has multiple destination zones, create a record in fare_rules for each destination_id."

        - name: "contains_id"
          in: "formData"
          type: "integer"
          description: "Identifies the zones (referencing zones.zone_id) that a rider will enter while using a given fare class. Used in some systems to calculate correct fare class."

      responses:
        "200":
          description: "Successful operation."
        "400":
          description: "Invalid input."
        "404":
          description: "Agency fare rule not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

    delete:
      tags:
        - "Fares"
      summary: "Deletes a specific agency fare"
      description: ""
      operationId: "fareRuleDelete"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "fare_id"
          in: "path"
          description: "ID of specific fare"
          required: true
          type: "integer"
          format: "int64"

        - name: "rule_id"
          in: "path"
          description: "ID of specific fare rule"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation."
        "404":
          description: "Agency fare rule not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  #Agency Calendar Dates
  /calendar-dates:
    get:
      tags:
        - "Calendar Dates"
      summary: "Get agency calendar dates"
      description: ""
      operationId: "calendarDates"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CalendarDate"

    post:
      tags:
        - "Calendar Dates"
      summary: "Creates a new calendar date for the agency"
      description: ""
      operationId: "calendarDatesCreate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "service_id"
          in: "formData"
          type: "integer"
          description: "ID of specific agency service (services.id)"
          required: true

        - name: "date"
          in: "formData"
          type: "string"
          format: "Y-m-d"
          description: "Date when service exception occurs."
          required: true

        - name: "exception_type"
          in: "formData"
          type: "string"
          description: "Indicates whether service is available on the date specified in the date field."
          enum: ['available', 'not_available']
          required: true

      responses:
        "201":
          description: "Success! The calendar date has been registered."
        "400":
          description: "Invalid input."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  /calendar-dates/{date_id}:
    get:
      tags:
        - "Calendar Dates"
      summary: "Get a specific agency calendar date"
      description: ""
      operationId: "calendarDateInformation"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "date_id"
          in: "path"
          description: "ID of specific calendar date"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CalendarDate"
        "404":
          description: "Agency calendar date not found."

    put:
      tags:
        - "Calendar Dates"
      summary: "Updates a specific agency calendar date"
      description: ""
      operationId: "calendarDateUpdate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "date_id"
          in: "path"
          description: "ID of specific calendar date"
          type: "integer"
          format: "int64"
          required: true

        - name: "service_id"
          in: "formData"
          type: "integer"
          description: "ID of specific agency service (services.id)"

        - name: "date"
          in: "formData"
          type: "string"
          format: "Y-m-d"
          description: "Date when service exception occurs."

        - name: "exception_type"
          in: "formData"
          type: "string"
          description: "Indicates whether service is available on the date specified in the date field."
          enum: ['available', 'not_available']

      responses:
        "200":
          description: "Successful operation."
        "400":
          description: "Invalid input."
        "404":
          description: "Agency calendar date not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

    delete:
      tags:
        - "Calendar Dates"
      summary: "Deletes a specific agency calendar date"
      description: ""
      operationId: "deleteCalendarDate"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "date_id"
          in: "path"
          description: "ID of specific calendar date"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation."
        "404":
          description: "Agency calendar date not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  #Agency Services
  /services:
    get:
      tags:
        - "Services"
      summary: "Get agency services"
      description: ""
      operationId: "services"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Service"

    post:
      tags:
        - "Services"
      summary: "Creates a new service for the agency"
      description: ""
      operationId: "servicesCreate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "name"
          in: "formData"
          type: "string"
          description: "Service name."
          required: true

      responses:
        "201":
          description: "Success! The service has been registered."
        "400":
          description: "Invalid input."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  /services/{service_id}:
    get:
      tags:
        - "Services"
      summary: "Get a specific agency service"
      description: ""
      operationId: "serviceInformation"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "service_id"
          in: "path"
          description: "ID of specific agency service (services.id)"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Service"
        "404":
          description: "Agency service not found."

    put:
      tags:
        - "Services"
      summary: "Updates a specific agency service"
      description: ""
      operationId: "serviceUpdate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "service_id"
          in: "path"
          description: "ID of specific agency service (services.id)"
          required: true
          type: "integer"
          format: "int64"

        - name: "name"
          in: "formData"
          type: "string"
          description: "Service name."
          required: true

      responses:
        "200":
          description: "Successful operation."
        "400":
          description: "Invalid input."
        "404":
          description: "Agency service not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

    delete:
      tags:
        - "Services"
      summary: "Deletes a specific agency service"
      description: ""
      operationId: "deleteService"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "service_id"
          in: "path"
          description: "ID of specific agency service (services.id)"
          required: true
          type: "integer"
          format: "int64"

      responses:
        "200":
          description: "Successful operation."
        "404":
          description: "Agency service not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  #Agency Zones
  /zones:
    get:
      tags:
        - "Zones"
      summary: "Get agency zones"
      description: ""
      operationId: "zones"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Zone"

    post:
      tags:
        - "Zones"
      summary: "Creates a new zone for the agency"
      description: ""
      operationId: "zonesCreate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "name"
          in: "formData"
          type: "string"
          description: "Zone name."
          required: true

      responses:
        "201":
          description: "Success! The zone has been registered."
        "400":
          description: "Invalid input."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  /zones/{zone_id}:
    get:
      tags:
        - "Zones"
      summary: "Get a specific agency zone"
      description: ""
      operationId: "zoneInformation"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "zone_id"
          in: "path"
          description: "ID of specific agency zone (zones.id)"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Zone"
        "404":
          description: "Agency zone not found."

    put:
      tags:
        - "Zones"
      summary: "Updates a specific agency zone"
      description: ""
      operationId: "zoneUpdate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "zone_id"
          in: "path"
          description: "ID of specific agency zone (zones.id)"
          required: true
          type: "integer"
          format: "int64"

        - name: "name"
          in: "formData"
          type: "string"
          description: "Zone name."
          required: true

      responses:
        "200":
          description: "Successful operation."
        "400":
          description: "Invalid input."
        "404":
          description: "Agency zone not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

    delete:
      tags:
        - "Zones"
      summary: "Deletes a specific agency zone"
      description: ""
      operationId: "deleteZone"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "zone_id"
          in: "path"
          description: "ID of specific agency zone (zones.id)"
          required: true
          type: "integer"
          format: "int64"

      responses:
        "200":
          description: "Successful operation."
        "404":
          description: "Agency zone not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  #Agency Trips
  /trips:
    get:
      tags:
        - "Trips"
      summary: "Get agency trips"
      description: ""
      operationId: "trips"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Trip"

    post:
      tags:
        - "Trips"
      summary: "Creates a new trip for the agency"
      description: ""
      operationId: "tripsCreate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "route_id"
          in: "formData"
          description: "ID of specific route"
          required: true
          type: "integer"
          format: "int64"

        - name: "service_id"
          in: "formData"
          description: "ID of specific service"
          required: true
          type: "integer"
          format: "int64"

        - name: "direction_id"
          in: "formData"
          description: "Indicates the direction of travel for a trip. This field is not used in routing; it provides a way to separate trips by direction when publishing time tables. (0-going: Travel in one direction / 1-return: Travel in the opposite direction)"
          type: "string"
          enum: ['going', 'return']
          required: true

        - name: "headsign"
          in: "formData"
          description: "Text that appears on signage identifying the trip's destination to riders. Use this field to distinguish between different patterns of service on the same route. If the headsign changes during a trip, trip_headsign can be overridden by specifying values for the stop_times.headsign."
          type: "string"

        - name: "short_name"
          in: "formData"
          description: "Public facing text used to identify the trip to riders, for instance, to identify train numbers for commuter rail trips. If riders do not commonly rely on trip names, leave this field empty. A short_name value, if provided, should uniquely identify a trip within a service day; it should not be used for destination names or limited/express designations."
          type: "string"

        - name: "block_id"
          in: "formData"
          description: "Identifies the block to which the trip belongs. A block consists of a single trip or many sequential trips made using the same vehicle, defined by shared service days and block_id."
          type: "string"
          enum: ['going', 'return']

        - name: "wheelchair_accessible"
          in: "formData"
          description: "Indicates wheelchair accessibility."
          type: "string"
          enum: ['empty', 'has', 'hasnt']

        - name: "bikes_allowed"
          in: "formData"
          description: "  Indicates whether bikes are allowed."
          type: "string"
          enum: ['empty', 'has', 'hasnt']

      responses:
        "201":
          description: "Success! The trip has been registered."
        "400":
          description: "Invalid input."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  /trips/{trip_id}:
    get:
      tags:
        - "Trips"
      summary: "Get a specific agency trip"
      description: ""
      operationId: "tripInformation"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "trip_id"
          in: "path"
          description: "ID of specific agency trip"
          required: true
          type: "integer"
          format: "int64"

      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Trip"
        "404":
          description: "Agency trip not found."

    put:
      tags:
        - "Trips"
      summary: "Updates a specific agency trip"
      description: ""
      operationId: "tripUpdate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "trip_id"
          in: "path"
          description: "ID of specific agency trip"
          required: true
          type: "integer"
          format: "int64"

        - name: "route_id"
          in: "formData"
          description: "ID of specific route"
          type: "integer"
          format: "int64"

        - name: "service_id"
          in: "formData"
          description: "ID of specific service"
          type: "integer"
          format: "int64"

        - name: "direction_id"
          in: "formData"
          description: "Indicates the direction of travel for a trip. This field is not used in routing; it provides a way to separate trips by direction when publishing time tables. (0-going: Travel in one direction / 1-return: Travel in the opposite direction)"
          type: "string"
          enum: ['going', 'return']

        - name: "headsign"
          in: "formData"
          description: "Text that appears on signage identifying the trip's destination to riders. Use this field to distinguish between different patterns of service on the same route. If the headsign changes during a trip, trip_headsign can be overridden by specifying values for the stop_times.headsign."
          type: "string"

        - name: "short_name"
          in: "formData"
          description: "Public facing text used to identify the trip to riders, for instance, to identify train numbers for commuter rail trips. If riders do not commonly rely on trip names, leave this field empty. A short_name value, if provided, should uniquely identify a trip within a service day; it should not be used for destination names or limited/express designations."
          type: "string"

        - name: "block_id"
          in: "formData"
          description: "Identifies the block to which the trip belongs. A block consists of a single trip or many sequential trips made using the same vehicle, defined by shared service days and block_id."
          type: "string"
          enum: ['going', 'return']

        - name: "wheelchair_accessible"
          in: "formData"
          description: "Indicates wheelchair accessibility."
          type: "string"
          enum: ['empty', 'has', 'hasnt']

        - name: "bikes_allowed"
          in: "formData"
          description: "  Indicates whether bikes are allowed."
          type: "string"
          enum: ['empty', 'has', 'hasnt']

      responses:
        "200":
          description: "Successful operation."
        "400":
          description: "Invalid input."
        "404":
          description: "Agency trip not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

    delete:
      tags:
        - "Trips"
      summary: "Deletes a specific agency trip"
      description: ""
      operationId: "deleteTrip"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "trip_id"
          in: "path"
          description: "ID of specific agency trip"
          required: true
          type: "integer"
          format: "int64"

      responses:
        "200":
          description: "Successful operation."
        "404":
          description: "Agency trip not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  #Agency Stops
  /stops:
    get:
      tags:
        - "Stops"
      summary: "Get agency stops"
      description: ""
      operationId: "stops"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Stop"

    post:
      tags:
        - "Stops"
      summary: "Creates a new stop for the agency"
      description: ""
      operationId: "stopsCreate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "zone_id"
          in: "formData"
          description: "Identifies the zone for a stop."
          required: true
          type: "integer"

        - name: "name"
          in: "formData"
          description: "Name of the location. Use a name that people will understand in the local and tourist vernacular."
          required: true
          type: "string"

        - name: "desc"
          in: "formData"
          description: "Description of the location that provides useful, quality information. Do not simply duplicate the name of the location."
          required: true
          type: "string"

        - name: "location_type"
          in: "formData"
          description: "Type of the location."
          type: "string"
          enum: ['platform', 'station', 'entrance_exit', 'generic_node', 'boarding_area']
          required: true

        - name: "code"
          in: "formData"
          description: "Short text or a number that identifies the location for riders. These codes are often used in phone-based transit information systems or printed on signage to make it easier for riders to get information for a particular location."
          type: "string"

        - name: "lat"
          in: "formData"
          description: "Latitude of the location. Required for locations which are platform, stations or entrances/exits,"
          type: "string"

        - name: "lon"
          in: "formData"
          description: "Longitude of the location. Required for locations which are platform, stations or entrances/exits,"
          type: "string"

        - name: "stop_url"
          in: "formData"
          description: "URL of a web page about the location. This should be different from the agency.url and the routes.url field values."
          type: "string"

        - name: "parent_station"
          in: "formData"
          description: "Defines hierarchy between the different locations. (stops.id). Required for locations which are entrance_exit, generic_node or boarding_area."
          type: "integer"

        - name: "wheelchair_boarding"
          in: "formData"
          description: "Indicates whether wheelchair boardings are possible from the location."
          type: "string"
          enum: ['empty', 'has', 'hasnt']

      responses:
        "201":
          description: "Success! The stop has been registered."
        "400":
          description: "Invalid input."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  /stops/{stop_id}:
    get:
      tags:
        - "Stops"
      summary: "Get a specific agency stop"
      description: ""
      operationId: "stopInformation"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "stop_id"
          in: "path"
          description: "ID of specific agency stop"
          required: true
          type: "integer"
          format: "int64"

      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Stop"
        "404":
          description: "Agency stop not found."

    put:
      tags:
        - "Stops"
      summary: "Updates a specific agency stop"
      description: ""
      operationId: "stopUpdate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "stop_id"
          in: "path"
          description: "ID of specific agency stop."
          required: true
          type: "integer"
          format: "int64"

        - name: "zone_id"
          in: "formData"
          description: "Identifies the zone for a stop."
          type: "integer"

        - name: "name"
          in: "formData"
          description: "Name of the location. Use a name that people will understand in the local and tourist vernacular."
          type: "string"

        - name: "desc"
          in: "formData"
          description: "Description of the location that provides useful, quality information. Do not simply duplicate the name of the location."
          type: "string"

        - name: "location_type"
          in: "formData"
          description: "Type of the location."
          type: "string"
          enum: ['platform', 'station', 'entrance_exit', 'generic_node', 'boarding_area']

        - name: "code"
          in: "formData"
          description: "Short text or a number that identifies the location for riders. These codes are often used in phone-based transit information systems or printed on signage to make it easier for riders to get information for a particular location."
          type: "string"

        - name: "lat"
          in: "formData"
          description: "Latitude of the location. Required for locations which are platform, stations or entrances/exits,"
          type: "string"

        - name: "lon"
          in: "formData"
          description: "Longitude of the location. Required for locations which are platform, stations or entrances/exits,"
          type: "string"

        - name: "stop_url"
          in: "formData"
          description: "URL of a web page about the location. This should be different from the agency.url and the routes.url field values."
          type: "string"

        - name: "parent_station"
          in: "formData"
          description: "Defines hierarchy between the different locations. (stops.id). Required for locations which are entrance_exit, generic_node or boarding_area."
          type: "integer"

        - name: "wheelchair_boarding"
          in: "formData"
          description: "Indicates whether wheelchair boardings are possible from the location."
          type: "string"
          enum: ['empty', 'has', 'hasnt']

      responses:
        "200":
          description: "Successful operation."
        "400":
          description: "Invalid input."
        "404":
          description: "Agency stop not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

    delete:
      tags:
        - "Stops"
      summary: "Deletes a specific agency stop"
      description: ""
      operationId: "stopTrip"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "stop_id"
          in: "path"
          description: "ID of specific agency stop"
          required: true
          type: "integer"
          format: "int64"

      responses:
        "200":
          description: "Successful operation."
        "404":
          description: "Agency stop not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  #Agency Stops Times
  /stop-times:
    get:
      tags:
        - "Stop Times"
      summary: "Get agency stop times"
      description: ""
      operationId: "stopTime"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/StopTime"

    post:
      tags:
        - "Stop Times"
      summary: "Creates a new stop time for the agency"
      description: ""
      operationId: "stopTimeCreate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "trip_id"
          in: "formData"
          description: "Identifies the trip for a stop time. (trips.id)"
          required: true
          type: "integer"

        - name: "stop_id"
          in: "formData"
          description: "Identifies the stop. (stops.id)"
          required: true
          type: "integer"

        - name: "stop_sequence"
          in: "formData"
          description: "Order of stops for a particular trip. The values must increase along the trip but do not need to be consecutive."
          required: true
          type: "integer"

        - name: "arrival_time"
          in: "formData"
          description: "Arrival time at a specific stop for a specific trip on a route. If there are not separate times for arrival and departure at a stop, enter the same value for arrival_time and departure_time. For times occurring after midnight on the service day, enter the time as a value greater than 24:00:00 in HH:MM:SS local time for the day on which the trip schedule begins. Required if timepoint is true (1)."
          type: "string"

        - name: "departure_time"
          in: "formData"
          description: "Departure time from a specific stop for a specific trip on a route. For times occurring after midnight on the service day, enter the time as a value greater than 24:00:00 in HH:MM:SS local time for the day on which the trip schedule begins. If there are not separate times for arrival and departure at a stop, enter the same value for arrival_time and departure_time. Required if timepoint is true (1)."
          type: "string"

        - name: "stop_headsign"
          in: "formData"
          description: "Text that appears on signage identifying the trip's destination to riders."
          type: "string"

        - name: "pickup_type"
          in: "formData"
          description: "Indicates pickup method."
          type: "string"
          enum: ['regular', 'hasnt', 'call', 'combine']

        - name: "drop_off_type"
          in: "formData"
          description: "Indicates drop off method."
          type: "string"
          enum: ['regular', 'hasnt', 'call', 'combine']

        - name: "timepoint"
          in: "formData"
          description: "Indicates if arrival and departure times for a stop are strictly adhered to by the vehicle or if they are instead approximate and/or interpolated times. This field allows a GTFS producer to provide interpolated stop-times, while indicating that the times are approximate (0-Times are considered approximate / 1-Times are considered exact)."
          type: "boolean"

      responses:
        "201":
          description: "Success! The stop time has been registered."
        "400":
          description: "Invalid input."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  /stop-times/{stop_time_id}:
    get:
      tags:
        - "Stop Times"
      summary: "Get a specific agency stop time"
      description: ""
      operationId: "stopTimeInformation"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "stop_time_id"
          in: "path"
          description: "ID of specific agency stop tinme"
          required: true
          type: "integer"
          format: "int64"

      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/StopTime"
        "404":
          description: "Agency stop time not found."

    put:
      tags:
        - "Stop Times"
      summary: "Updates a specific agency stop time"
      description: ""
      operationId: "stopTimeUpdate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "stop_time_id"
          in: "path"
          description: "ID of specific agency stop."
          required: true
          type: "integer"
          format: "int64"

        - name: "trip_id"
          in: "formData"
          description: "Identifies the trip for a stop time. (trips.id)"
          type: "integer"

        - name: "stop_id"
          in: "formData"
          description: "Identifies the stop. (stops.id)"
          type: "integer"

        - name: "stop_sequence"
          in: "formData"
          description: "Order of stops for a particular trip. The values must increase along the trip but do not need to be consecutive."
          type: "integer"

        - name: "arrival_time"
          in: "formData"
          description: "Arrival time at a specific stop for a specific trip on a route. If there are not separate times for arrival and departure at a stop, enter the same value for arrival_time and departure_time. For times occurring after midnight on the service day, enter the time as a value greater than 24:00:00 in HH:MM:SS local time for the day on which the trip schedule begins. Required if timepoint is true (1)."
          type: "string"

        - name: "departure_time"
          in: "formData"
          description: "Departure time from a specific stop for a specific trip on a route. For times occurring after midnight on the service day, enter the time as a value greater than 24:00:00 in HH:MM:SS local time for the day on which the trip schedule begins. If there are not separate times for arrival and departure at a stop, enter the same value for arrival_time and departure_time. Required if timepoint is true (1)."
          type: "string"

        - name: "stop_headsign"
          in: "formData"
          description: "Text that appears on signage identifying the trip's destination to riders."
          type: "string"

        - name: "pickup_type"
          in: "formData"
          description: "Indicates pickup method."
          type: "string"
          enum: ['regular', 'hasnt', 'call', 'combine']

        - name: "drop_off_type"
          in: "formData"
          description: "Indicates drop off method."
          type: "string"
          enum: ['regular', 'hasnt', 'call', 'combine']

        - name: "timepoint"
          in: "formData"
          description: "Indicates if arrival and departure times for a stop are strictly adhered to by the vehicle or if they are instead approximate and/or interpolated times. This field allows a GTFS producer to provide interpolated stop-times, while indicating that the times are approximate (0-Times are considered approximate / 1-Times are considered exact)."
          type: "boolean"

      responses:
        "200":
          description: "Successful operation."
        "400":
          description: "Invalid input."
        "404":
          description: "Agency stop time not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

    delete:
      tags:
        - "Stop Times"
      summary: "Deletes a specific agency stop time"
      description: ""
      operationId: "stopTimeTrip"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "stop_time_id"
          in: "path"
          description: "ID of specific agency stop time"
          required: true
          type: "integer"
          format: "int64"

      responses:
        "200":
          description: "Successful operation."
        "404":
          description: "Agency stop time not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  #Agency Vehicles
  /vehicles:
    get:
      tags:
        - "Vehicles"
      summary: "Get agency vehicles"
      description: ""
      operationId: "vehicles"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/VehicleDescriptor"

    post:
      tags:
        - "Vehicles"
      summary: "Creates a new vehicle for the agency"
      description: ""
      operationId: "vehicleCreate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "label"
          in: "formData"
          description: "Vehicle visible label, i.e., something that must be shown to the passenger to help identify the correct vehicle."
          required: true
          type: "string"

        - name: "license_plate"
          in: "formData"
          description: "The license plate of the vehicle."
          required: true
          type: "string"

      responses:
        "201":
          description: "Success! The vehicle time has been registered."
        "400":
          description: "Invalid input."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  /vehicles/{vehicle_id}:
    get:
      tags:
        - "Vehicles"
      summary: "Get a specific agency vehicle"
      description: ""
      operationId: "vehicleInformation"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "vehicle_id"
          in: "path"
          description: "ID of specific agency vehicle"
          required: true
          type: "integer"
          format: "int64"

      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/VehicleDescriptor"
        "404":
          description: "Agency vehicle not found."

    put:
      tags:
        - "Vehicles"
      summary: "Updates a specific agency vehicle"
      description: ""
      operationId: "vehicleUpdate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "vehicle_id"
          in: "path"
          description: "ID of specific agency vehicle."
          required: true
          type: "integer"
          format: "int64"

        - name: "label"
          in: "formData"
          description: "  User visible label, i.e., something that must be shown to the passenger to help identify the correct vehicle."
          required: true
          type: "string"

        - name: "license_plate"
          in: "formData"
          description: "The license plate of the vehicle."
          required: true
          type: "string"

      responses:
        "200":
          description: "Successful operation."
        "400":
          description: "Invalid input."
        "404":
          description: "Agency vehicle time not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

    delete:
      tags:
        - "Vehicles"
      summary: "Deletes a specific agency vehicle"
      description: ""
      operationId: "vehicleTrip"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "vehicle_id"
          in: "path"
          description: "ID of specific agency vehicle"
          required: true
          type: "integer"
          format: "int64"

      responses:
        "200":
          description: "Successful operation."
        "404":
          description: "Agency vehicle not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  #Agency Trips In Progress
  /trips-in-progress:
    get:
      tags:
        - "Trips In Progress"
      summary: "Get agency trips in progress"
      description: ""
      operationId: "tripsInProgress"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TripDescriptor"

    post:
      tags:
        - "Trips In Progress"
      summary: "Creates a new trip for the agency"
      description: ""
      operationId: "tripsInProgressCreate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "route_id"
          in: "formData"
          description: "ID of specific route."
          required: true
          type: "integer"

        - name: "trip_id"
          in: "formData"
          description: "ID of specific trip."
          required: true
          type: "integer"

        - name: "user_id"
          in: "formData"
          description: "ID of specific user driver."
          required: true
          type: "integer"


        - name: "vehicle_id"
          in: "formData"
          description: "ID of specific vehicle."
          required: true
          type: "integer"

        - name: "start_time"
          in: "formData"
          description: "The initially scheduled start time of this trip instance. The field type Time defines the format of this field, for example 11:15:35 or 25:15:35."
          required: true
          type: "string"

        - name: "start_date"
          in: "formData"
          description: "The start date of this trip instance in YYYY-MM-DD format."
          required: true
          type: "string"

        - name: "end_time"
          in: "formData"
          description: "The end time of this trip instance. The field type Time defines the format of this field, for example 11:15:35 or 25:15:35."
          required: true
          type: "string"

        - name: "end_date"
          in: "formData"
          description: "The end date of this trip instance in YYYY-MM-DD format."
          required: true
          type: "string"

      responses:
        "201":
          description: "Success! The trip has been registered."
        "400":
          description: "Invalid input."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  /trips-in-progress/{trip_descriptor_id}:
    get:
      tags:
        - "Trips In Progress"
      summary: "Get a specific agency scheduled trip"
      description: ""
      operationId: "tripsInProgressInformation"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "trip_descriptor_id"
          in: "path"
          description: "ID of specific agency scheduled trip"
          required: true
          type: "integer"
          format: "int64"

      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TripDescriptor"
        "404":
          description: "Agency scheduled trip not found."

    put:
      tags:
        - "Trips In Progress"
      summary: "Updates a specific agency scheduled trip"
      description: ""
      operationId: "tripsInProgressUpdate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "trip_descriptor_id"
          in: "path"
          description: "ID of specific agency scheduled trip"
          required: true
          type: "integer"
          format: "int64"

        - name: "route_id"
          in: "formData"
          description: "ID of specific route."
          required: true
          type: "integer"

        - name: "trip_id"
          in: "formData"
          description: "ID of specific trip."
          required: true
          type: "integer"

        - name: "user_id"
          in: "formData"
          description: "ID of specific user driver."
          required: true
          type: "integer"


        - name: "vehicle_id"
          in: "formData"
          description: "ID of specific vehicle."
          required: true
          type: "integer"

        - name: "start_time"
          in: "formData"
          description: "The initially scheduled start time of this trip instance. The field type Time defines the format of this field, for example 11:15:35 or 25:15:35."
          required: true
          type: "string"

        - name: "start_date"
          in: "formData"
          description: "The start date of this trip instance in YYYY-MM-DD format."
          required: true
          type: "string"

        - name: "end_time"
          in: "formData"
          description: "The end time of this trip instance. The field type Time defines the format of this field, for example 11:15:35 or 25:15:35."
          required: true
          type: "string"

        - name: "end_date"
          in: "formData"
          description: "The end date of this trip instance in YYYY-MM-DD format."
          required: true
          type: "string"

      responses:
        "200":
          description: "Successful operation."
        "400":
          description: "Invalid input."
        "404":
          description: "Agency scheduled trip not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

    delete:
      tags:
        - "Trips In Progress"
      summary: "Deletes a specific agency scheduled trip"
      description: ""
      operationId: "tripsInProgressDelete"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "trip_descriptor_id"
          in: "path"
          description: "ID of specific agency scheduled trip"
          required: true
          type: "integer"
          format: "int64"

      responses:
        "200":
          description: "Successful operation."
        "404":
          description: "Agency scheduled trip not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  #Agency Driver
  /driver/trips-to-start:
    get:
      tags:
        - "Driver"
      summary: "Get driver trips to start"
      description: ""
      operationId: "DriverTripsToStart"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TripDescriptor"

  /driver/start-trip:
    post:
      tags:
        - "Driver"
      summary: "Starts a new scheduled trip for the agency"
      description: ""
      operationId: "driverStartTrip"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "trip_id"
          in: "formData"
          description: "ID of specific scheduled trip."
          required: true
          type: "integer"

      responses:
        "200":
          description: "Success! The scheduled trip has been started."
        "400":
          description: "Invalid input."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  /driver/stop-trip:
    post:
      tags:
        - "Driver"
      summary: "Stops a agency scheduled trip"
      description: ""
      operationId: "driverStopTrip"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "trip_id"
          in: "formData"
          description: "ID of specific scheduled trip."
          required: true
          type: "integer"

      responses:
        "200":
          description: "Success! The scheduled trip has been stoped."
        "400":
          description: "Invalid input."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  /driver/cancel-trip:
    post:
      tags:
        - "Driver"
      summary: "Cancel a agency scheduled trip"
      description: ""
      operationId: "driverCancelTrip"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "trip_id"
          in: "formData"
          description: "ID of specific scheduled trip."
          required: true
          type: "integer"

      responses:
        "200":
          description: "Success! The scheduled trip has been canceled."
        "400":
          description: "Invalid input."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  /driver/realtime-position:
    post:
      tags:
        - "Driver"
      summary: "Record the current vehicle position in progress"
      description: ""
      operationId: "driverRealtimePosition"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "trip_in_course_id"
          in: "formData"
          description: "ID of specific scheduled trip in progress."
          required: true
          type: "integer"

        - name: "lat"
          in: "formData"
          description: "Degrees North, in the WGS-84 coordinate system. Ex: -21.784913"
          required: true
          type: "string"

        - name: "lon"
          in: "formData"
          description: "  Degrees East, in the WGS-84 coordinate system. Ex: -46.586383"
          required: true
          type: "string"

      responses:
        "200":
          description: "Success! Position registred."
        "400":
          description: "Invalid input."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  #Agency GTFS feed files
  /agency/{agency_id}/gtfs:
    get:
      tags:
        - "GTFS Files"
      summary: "Get feed gtfs files from agency"
      description: ""
      operationId: "gtfsFiles"
      produces:
        - "application/json"
      parameters:
        - name: "agency_id"
          in: "path"
          description: "ID of specific agency"
          required: true
          type: "integer"
      responses:
        "200":
          description: "Successful operation! The gtfs files in the feed were downloaded in a .zip file."

  #Realtime monitoring
  /agency/{agency_id}/next-trips:
    get:
      tags:
        - "Realtime Trips"
      summary: "Recover the next trips from that agency of the current day with 15 minutes of tolerance."
      description: ""
      operationId: "realtimeNexTrips"
      produces:
        - "application/json"
      parameters:
        - name: "agency_id"
          in: "path"
          description: "ID of specific agency"
          required: true
          type: "integer"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TripDescriptor"

  /agency/{agency_id}/realtime-trip/{trip_descriptor_id}:
    get:
      tags:
        - "Realtime Trips"
      summary: "Real-time tracking of a specific agency trip and current vehicle position."
      description: ""
      operationId: "realtimeTrip"
      produces:
        - "application/json"
      parameters:
        - name: "agency_id"
          in: "path"
          description: "ID of specific agency"
          required: true
          type: "integer"

        - name: "trip_descriptor_id"
          in: "path"
          description: "ID of specific agency"
          required: true
          type: "integer"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TripDescriptor"

definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
      agency_id:
        type: "integer"
      type_id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"

  Agency:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      timezone:
        type: "string"
      lang:
        type: "string"
      fare_url:
        type: "string"
      phone:
        type: "string"
      email:
        type: "string"
    xml:
      name: "Agency"

  Route:
    type: "object"
    properties:
      id:
        type: "integer"
      short_name:
        type: "string"
      long_name:
        type: "string"
      desc:
        type: "string"
      type:
        type: "string"
        enum: ['vlt','subway','train','bus','ferry','tram','cable_car','cable_railway']
      url:
        type: "string"
      color:
        type: "string"
      text_color:
        type: "string"
      sort_order:
        type: "integer"
    xml:
      name: "Route"

  FareAttribute:
    type: "object"
    properties:
      id:
        type: "integer"
      price:
        type: "number"
      currency_type:
        type: "string"
      payment_method:
        type: "boolean"
      transfers:
        type: "string"
        enum: ['unallowed', 'one', 'two']
      transfer_duration:
        type: "integer"
    xml:
      name: "FareAttribute"

  FareRule:
    type: "object"
    properties:
      id:
        type: "integer"
      fare_id:
        type: "integer"
      route_id:
        type: "integer"
      origin_id:
        type: "integer"
      destination_id:
        type: "integer"
      contains_id:
        type: "integer"
    xml:
      name: "FareRule"

  CalendarDate:
    type: "object"
    properties:
      id:
        type: "integer"
      service_id:
        type: "integer"
      date:
        type: "string"
        format: "Y-m-d"
      exception_type:
        type: "string"
        enum: ['available', 'not_available']
    xml:
      name: "CalendarDate"

  Service:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
    xml:
      name: "Service"

  Zone:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
    xml:
      name: "Zone"

  Trip:
    type: "object"
    properties:
      id:
        type: "integer"
      route_id:
        type: "integer"
      service_id:
        type: "integer"
      headsign:
        type: "string"
      short_name:
        type: "string"
      direction_id:
        type: "string"
        enum: ['going', 'return']
      block_id:
        type: "integer"
      wheelchair_accessible:
        type: "string"
        enum: ['empty', 'has', 'hasnt']
      bikes_allowed:
        type: "string"
        enum: ['empty', 'has', 'hasnt']
    xml:
      name: "Trip"

  Stop:
    type: "object"
    properties:
      id:
        type: "integer"
      zone_id:
        type: "integer"
      name:
        type: "string"
      desc:
        type: "string"
      code:
        type: "string"
      lat:
        type: "string"
      lon:
        type: "string"
      stop_url:
        type: "string"
      location_type:
        type: "string"
        enum: ['platform', 'station', 'io', 'generic_node', 'boarding_area']
      parent_station:
        type: "integer"
      wheelchair_boarding:
        type: "string"
        enum: ['empty', 'has', 'hasnt']
    xml:
      name: "Stop"

  StopTime:
    type: "object"
    properties:
      id:
        type: "integer"
      trip_id:
        type: "integer"
      stop_id:
        type: "integer"
      arrival_time:
        type: "string"
      departure_time:
        type: "string"
      stop_sequence:
        type: "integer"
      stop_headsign:
        type: "string"
      pickup_type:
        type: "string"
        enum: ['regular', 'hasnt', 'call', 'combine']
      drop_off_type:
        type: "string"
        enum: ['regular', 'hasnt', 'call', 'combine']
      timepoint:
        type: "boolean"
    xml:
      name: "StopTime"

  VehicleDescriptor:
    type: "object"
    properties:
      id:
        type: "integer"
      label:
        type: "string"
      license_plate:
        type: "string"
    xml:
      name: "VehicleDescriptor"

  TripDescriptor:
    type: "object"
    properties:
      id:
        type: "integer"
      user_id:
        type: "integer"
      trip_id:
        type: "integer"
      route_id:
        type: "integer"
      trip_status:
        type: "string"
        enum: ['scheduled', 'started', 'canceled', 'closed']
      start_date:
        type: "string"
      start_time:
        type: "string"
      end_date:
        type: "string"
      end_time:
        type: "string"
      license_plate:
        type: "string"
    xml:
      name: "TripDescriptor"

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
