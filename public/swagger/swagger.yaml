swagger: "2.0"
info:
  description: "This API manages routes for public transport agencies. Saving your data in a relational database, converts the information to the GTFS specification, which can be used to search for information from traffic agencies and to monitor in real time any specific itinerary. \n\nImplemented for a graduate work in the Computer Science course. \n\n It is necessary to have configured the SMTP server credentials to notify the user via e-mail with the generated password."
  version: "1.0.0"
  title: "GTFS Manager"
  contact:
    email: "matheusinhesta@live.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/api"
tags:
  - name: "Auth"
    description: "Everything about authentication on API"
  - name: "Agency"
    description: "Everything about agency informations"
  - name: "Users"
    description: "Operations about user. Only admin user can access this routes!"
paths:
  #Auth Routes
  /register:
    post:
      tags:
        - "Auth"
      summary: "Register your Agency and User in API"
      description: "It is necessary to have configured the SMTP server credentials to notify the user via e-mail with the generated password"
      operationId: "register"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "email"
          in: "formData"
          description: "User e-mail address"
          required: true
          type: "string"

        - name: "name"
          in: "formData"
          description: "Full username"
          required: true
          type: "string"

        - name: "agency_name"
          in: "formData"
          description: "Full name of the transit agency"
          required: true
          type: "string"

        - name: "agency_url"
          in: "formData"
          description: "URL of the transit agency"
          required: true
          type: "string"

        - name: "agency_timezone"
          in: "formData"
          description: "Timezone where the transit agency is located"
          required: true
          type: "string"

        - name: "agency_lang"
          in: "formData"
          description: "Primary language used by this transit agency"
          required: false
          type: "string"

        - name: "agency_phone"
          in: "formData"
          description: "A voice telephone number for the specified agency. This field is a string value that presents the telephone number as typical for the agency's service area. It can and should contain punctuation marks to group the digits of the number. Dialable text (for example, TriMet's '503-238-RIDE') is permitted, but the field must not contain any other descriptive text"
          required: false
          type: "string"

        - name: "agency_fare_url"
          in: "formData"
          description: "URL of a web page that allows a rider to purchase tickets or other fare instruments for that agency online"
          required: false
          type: "string"

        - name: "agency_email"
          in: "formData"
          description: "Email address actively monitored by the agencyâ€™s customer service department. This email address should be a direct contact point where transit riders can reach a customer service representative at the agency"
          required: false
          type: "string"

      responses:
        "201":
          description: "Success! An e-mail was sent to the registered address with the user generated password."
        "400":
          description: "Invalid input."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  /login:
    post:
      tags:
        - "Auth"
      summary: "Login user into the API"
      description: ""
      operationId: "login"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "email"
          in: "formData"
          description: "The user e-mail address for login"
          required: true
          type: "string"
        - name: "password"
          in: "formData"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        "200":
          description: "Successful operation"
          headers:
            access_token:
              type: "string"
              description: "JWT token used for any request that needs to be authenticated"
            token_type:
              type: "string"
              description: "Tokens type"
            expires_in:
              type: "string"
              format: "date-time"
              description: "Time in UTC when token expires"
        "400":
          description: "Invalid inputs."
        "401":
          description: "Unauthorized. Invalid e-mail/password"
        "500":
          description: "The token could not be created"

  /logout:
    get:
      tags:
        - "Auth"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logout"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"
      responses:
        "200":
          description: "Successful operation"

  /forget-password:
    post:
      tags:
        - "Auth"
      summary: "Send a new password to the user's e-mail"
      description: "It is necessary to have configured the SMTP server credentials to notify the user via e-mail with the generated a new password"
      operationId: "forgetPassword"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "email"
          in: "formData"
          description: "The user e-mail address for login"
          required: true
          type: "string"

      responses:
        "200":
          description: "Success! An e-mail was sent to the registered address with the user generated a new password."
        "400":
          description: "Invalid input."
        "404":
          description: "User not found."
        "500":
          description: "The token could not be created"

  /change-password:
    post:
      tags:
        - "Auth"
      summary: "Change the password of the authenticated user"
      description: ""
      operationId: "changePassword"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "password"
          in: "formData"
          description: "The user password"
          required: true
          type: "string"

        - name: "new_password"
          in: "formData"
          description: "The new password"
          required: true
          type: "string"

        - name: "new_password_confirmation"
          in: "formData"
          description: "The new password confirmation"
          required: true
          type: "string"

      responses:
        "200":
          description: "Success! User password has been changed."
        "400":
          description: "Invalid input."
        "500":
          description: "The new password could not be updated."

  /refresh:
    get:
      tags:
        - "Auth"
      summary: "Refresh access token"
      description: ""
      operationId: "refresh"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"
      responses:
        "200":
          description: "Successful operation"
          headers:
            access_token:
              type: "string"
              description: "JWT token used for any request that needs to be authenticated"
            token_type:
              type: "string"
              description: "Tokens type"
            expires_in:
              type: "string"
              format: "date-time"
              description: "Time in UTC when token expires"

  /me:
    get:
      tags:
        - "Auth"
      summary: "Get authenticated user"
      description: ""
      operationId: "me"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"
      responses:
        "200":
          description: "Successful operation"
          headers:
            access_token:
              type: "string"
              description: "JWT token used for any request that needs to be authenticated"
            token_type:
              type: "string"
              description: "Tokens type"
            expires_in:
              type: "string"
              format: "date-time"
              description: "Time in UTC when token expires"

  #Agency Routes
  /agency:
    get:
      tags:
        - "Agency"
      summary: "Get user agency"
      description: ""
      operationId: "agency"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Agency"

    post:
      tags:
        - "Agency"
      summary: "Update agency informations"
      description: "Only admin user can access this route!"
      operationId: "agencyUpdate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "name"
          in: "formData"
          type: "string"
          description: "Full name of the transit agency"

        - name: "url"
          in: "formData"
          type: "string"
          description: "URL of the transit agency"

        - name: "timezone"
          in: "formData"
          type: "string"
          description: "Timezone where the transit agency is located"

        - name: "lang"
          in: "formData"
          type: "string"
          description: "Primary language used by this transit agency"

        - name: "phone"
          in: "formData"
          type: "string"
          description: "A voice telephone number for the specified agency. This field is a string value that presents the telephone number as typical for the agency's service area. It can and should contain punctuation marks to group the digits of the number. Dialable text (for example, TriMet's '503-238-RIDE') is permitted, but the field must not contain any other descriptive text"

        - name: "fare_url"
          in: "formData"
          type: "string"
          description: "URL of a web page that allows a rider to purchase tickets or other fare instruments for that agency online"

        - name: "email"
          in: "formData"
          type: "string"
          description: "Email address actively monitored by the agencyâ€™s customer service department. This email address should be a direct contact point where transit riders can reach a customer service representative at the agency"

      responses:
        "200":
          description: "Successful operation."
        "400":
          description: "Invalid input."
        "500":
          description: "The agency could not be updated."

  #Users Routes
  /users:
    get:
      tags:
        - "Users"
      summary: "Get agency users"
      description: ""
      operationId: "users"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"

    post:
      tags:
        - "Users"
      summary: "Creates a new user for the agency"
      description: "If the password field is not passed, a random password is generated and sent to the user's registration email."
      operationId: "userCreate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "name"
          in: "formData"
          type: "string"
          description: "Full username"
          required: true

        - name: "email"
          in: "formData"
          type: "string"
          description: "User e-mail address"
          required: true

        - name: "type_id"
          in: "formData"
          type: "integer"
          description: "User type (1-Adminstrator / 2-Driver)"
          required: true

        - name: "password"
          in: "formData"
          type: "string"
          description: "User password"

        - name: "password_confirmation"
          in: "formData"
          type: "string"
          description: "User password confirmation"

      responses:
        "201":
          description: "Success! An e-mail was sent to the registered address with the user generated password."
        "400":
          description: "Invalid input."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  /users/{userId}:
    get:
      tags:
        - "Users"
      summary: "Get a specific agency user"
      description: ""
      operationId: "userInformation"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "userId"
          in: "path"
          description: "ID of specific user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"

    put:
      tags:
        - "Users"
      summary: "Updates a specific agency user"
      description: "If the password field is sent, a notification with the new password will be sent to the user's email"
      operationId: "userUpdate"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "userId"
          in: "path"
          description: "ID of specific user"
          required: true
          type: "integer"
          format: "int64"

        - name: "name"
          in: "formData"
          type: "string"
          description: "Full username"

        - name: "email"
          in: "formData"
          type: "string"
          description: "User e-mail address"

        - name: "type_id"
          in: "formData"
          type: "integer"
          description: "User type (1-Adminstrator / 2-Driver)"

        - name: "password"
          in: "formData"
          type: "string"
          description: "User password"

        - name: "password_confirmation"
          in: "formData"
          type: "string"
          description: "User password confirmation"

      responses:
        "200":
          description: "Successful operation."
        "400":
          description: "Invalid input."
        "404":
          description: "User not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

    delete:
      tags:
        - "Users"
      summary: "Deletes a specific agency user"
      description: ""
      operationId: "deleteUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "Authorization"
          in: "header"
          description: "Access token"
          required: true
          type: "string"
          format: "Bearer JWT token"

        - name: "userId"
          in: "path"
          description: "ID of specific user"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation."
        "403":
          description: "You cannot delete yourself."
        "404":
          description: "User not found."
        "500":
          description: "An error has occurred. Check the return message and error response or error logs."

  /pet/findByStatus:
    get:
      tags:
        - "pet"
      summary: "Finds Pets by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPetsByStatus"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "status"
          in: "query"
          description: "Status values that need to be considered for filter"
          required: true
          type: "array"
          items:
            type: "string"
            enum:
              - "available"
              - "pending"
              - "sold"
            default: "available"
          collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid status value"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
  /pet/findByTags:
    get:
      tags:
        - "pet"
      summary: "Finds Pets by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findPetsByTags"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid tag value"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
      deprecated: true
  /pet/{petId}:
    get:
      tags:
        - "pet"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getPetById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "petId"
          in: "path"
          description: "ID of pet to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
        - api_key: []
    post:
      tags:
        - "pet"
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "petId"
          in: "path"
          description: "ID of pet that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "name"
          in: "formData"
          description: "Updated name of the pet"
          required: false
          type: "string"
        - name: "status"
          in: "formData"
          description: "Updated status of the pet"
          required: false
          type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
    delete:
      tags:
        - "pet"
      summary: "Deletes a pet"
      description: ""
      operationId: "deletePet"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "petId"
          in: "path"
          description: "Pet id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
  /pet/{petId}/uploadImage:
    post:
      tags:
        - "pet"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "petId"
          in: "path"
          description: "ID of pet to update"
          required: true
          type: "integer"
          format: "int64"
        - name: "additionalMetadata"
          in: "formData"
          description: "Additional data to pass to server"
          required: false
          type: "string"
        - name: "file"
          in: "formData"
          description: "file to upload"
          required: false
          type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
  /store/inventory:
    get:
      tags:
        - "store"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
        - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - "store"
      summary: "Place an order for a pet"
      description: ""
      operationId: "placeOrder"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "order placed for purchasing the pet"
          required: true
          schema:
            $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
        - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "orderId"
          in: "path"
          description: "ID of pet that needs to be fetched"
          required: true
          type: "integer"
          maximum: 10.0
          minimum: 1.0
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    delete:
      tags:
        - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "orderId"
          in: "path"
          description: "ID of the order that needs to be deleted"
          required: true
          type: "integer"
          minimum: 1.0
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"


securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
      agency_id:
        type: "integer"
      type_id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"

  Agency:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      timezone:
        type: "string"
      lang:
        type: "string"
      fare_url:
        type: "string"
      phone:
        type: "string"
      email:
        type: "string"
    xml:
      name: "Agency"

  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
          - "placed"
          - "approved"
          - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"

  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
      - "name"
      - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
          - "available"
          - "pending"
          - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
